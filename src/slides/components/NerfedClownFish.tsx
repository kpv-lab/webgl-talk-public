/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Denys Almaral (https://sketchfab.com/denysalmaral)
license: SKETCHFAB Standard (https://sketchfab.com/licenses)
source: https://sketchfab.com/3d-models/low-poly-sea-fishes-with-animations-4dd46cf3a91648469302355cce82e660
*/

import { useGLTF } from '@react-three/drei'
import { useEffect, useState } from 'react'
import { Bone, Group, LoopOnce, MeshStandardMaterial, SkinnedMesh } from 'three'
import { GLTF } from 'three-stdlib'
import { sleep } from '../../lib/sleep'
import { DEG_90 } from '../../lib/util'
import { useMultiTakeAnimations } from '../use-multi-take-actions'

import fishesUrl from '/src/assets/clownfish.glb?url'


interface Props {
  position?:      [number, number, number]
  scale?:         number
  castShadow?:    boolean
  receiveShadow?: boolean
  opacity?:        number
  transparent?:   boolean
}

interface GLTFResult extends GLTF {
  nodes:     { _rootJoint: Bone, Object_7: SkinnedMesh }
  materials: { fishclown: MeshStandardMaterial }
}


export function NerfedClownFish(props: Props) {
  const { castShadow, opacity = 1, position = [0, 0, 0], receiveShadow, scale = 1, transparent = false } = props

  const [root, setRoot] = useState<Group | null>(null)
  const { nodes, materials, animations } = useGLTF(fishesUrl) as GLTFResult
  const actions = useMultiTakeAnimations({ animations, padding: [-30, 30], root })

  useEffect(() => {
    materials.fishclown.opacity = opacity
    materials.fishclown.transparent = transparent
  }, [materials.fishclown, opacity, transparent])

  useEffect(() => {
    const action = actions['All Animations']
    if (action) {
      sequence()
    }

    // fake the problem we had with the original asset!
    async function sequence(): Promise<void> {
      await sleep(1)
      action.setLoop(LoopOnce, 1)
      action.startAt(0.5)
      action.play()
      action.reset()
      await sleep(5)
      sequence()
    }
  }, [actions])

  return (
    <group
      dispose={null}
      position={position}
      ref={setRoot}
      rotation={[0, -DEG_90, 0]}
      scale={0.1 * scale}
      frustumCulled={false}
    >
      <primitive object={nodes._rootJoint} />
      <skinnedMesh
        geometry={nodes.Object_7.geometry}
        material={materials.fishclown}
        skeleton={nodes.Object_7.skeleton}
        castShadow={castShadow}
        receiveShadow={receiveShadow}
        frustumCulled={false}
      />
    </group>
  )
}

useGLTF.preload(fishesUrl)
