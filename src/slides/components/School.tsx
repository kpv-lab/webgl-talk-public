/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Denys Almaral (https://sketchfab.com/denysalmaral)
license: SKETCHFAB Standard (https://sketchfab.com/licenses)
source: https://sketchfab.com/3d-models/low-poly-sea-fishes-with-animations-4dd46cf3a91648469302355cce82e660
title: Low Poly Sea Fishes with Animations
*/

import { useGLTF } from '@react-three/drei'
import { ReactElement, useEffect, useState } from 'react'
import { GLTF } from 'three-stdlib'

import { Bone, Group, MeshStandardMaterial, SkinnedMesh } from 'three'
import { DEG_90 } from '../../lib/util'
import schoolUrl from '/src/assets/school.glb?url'

interface Props {
  position?:      [number, number, number]
  scale?:         number
  castShadow?:    boolean
  receiveShadow?: boolean
  opacity?:        number
  transparent?:   boolean
}

interface GLTFResult extends GLTF {
  nodes:     {
    _rootJoint: Bone,
    Object_7:  SkinnedMesh,
    Object_9:  SkinnedMesh,
    Object_11: SkinnedMesh,
    Object_13: SkinnedMesh,
    Object_15: SkinnedMesh,
    Object_17: SkinnedMesh,
    Object_19: SkinnedMesh,
    Object_21: SkinnedMesh,
    Object_23: SkinnedMesh,
  }
  materials: {
    fishBlacky:   MeshStandardMaterial
    fishBlow:     MeshStandardMaterial
    fishBlue:     MeshStandardMaterial
    fishBlueTang: MeshStandardMaterial
    fishCebra:    MeshStandardMaterial
    fishclown:    MeshStandardMaterial
    fishRed:      MeshStandardMaterial
    fishViolet:   MeshStandardMaterial
    yellowFish:   MeshStandardMaterial
  }
}

export function School(props: Props): ReactElement {
  const { castShadow, opacity = 1, position = [0, 0, 0], receiveShadow, scale = 1, transparent = false } = props

  const [root, setRoot] = useState<Group | null>(null)

  const { nodes, materials, animations } = useGLTF(schoolUrl) as GLTFResult
  // const actions = useMultiTakeAnimations({ animations, root })

  useEffect(() => {
    Object.values(materials).forEach((material) => {
      materials.fishclown.opacity = opacity
      materials.fishclown.transparent = transparent
    })
  }, [materials.fishclown, opacity, transparent])

  // useEffect(() => {
  //   actions.swim?.play()
  // }, [actions])

  return (
    <group ref={setRoot} {...props} dispose={null} rotation={[-DEG_90, DEG_90, DEG_90]}>
      <group position={[0,-25,0]}>
        <primitive object={nodes._rootJoint} />
        <skinnedMesh
          name="Object_7"
          geometry={nodes.Object_7.geometry}
          material={materials.yellowFish}
          skeleton={nodes.Object_7.skeleton}
        />
        <skinnedMesh
          name="Object_9"
          geometry={nodes.Object_9.geometry}
          material={materials.fishBlacky}
          skeleton={nodes.Object_9.skeleton}
        />
        <skinnedMesh
          name="Object_11"
          geometry={nodes.Object_11.geometry}
          material={materials.fishBlow}
          skeleton={nodes.Object_11.skeleton}
        />
        <skinnedMesh
          name="Object_13"
          geometry={nodes.Object_13.geometry}
          material={materials.fishBlue}
          skeleton={nodes.Object_13.skeleton}
        />
        <skinnedMesh
          name="Object_15"
          geometry={nodes.Object_15.geometry}
          material={materials.fishBlueTang}
          skeleton={nodes.Object_15.skeleton}
        />
        <skinnedMesh
          name="Object_17"
          geometry={nodes.Object_17.geometry}
          material={materials.fishCebra}
          skeleton={nodes.Object_17.skeleton}
        />
        <skinnedMesh
          name="Object_19"
          geometry={nodes.Object_19.geometry}
          material={materials.fishclown}
          skeleton={nodes.Object_19.skeleton}
        />
        <skinnedMesh
          name="Object_21"
          geometry={nodes.Object_21.geometry}
          material={materials.fishRed}
          skeleton={nodes.Object_21.skeleton}
        />
        <skinnedMesh
          name="Object_23"
          geometry={nodes.Object_23.geometry}
          material={materials.fishViolet}
          skeleton={nodes.Object_23.skeleton}
        />
      </group>
    </group>
  )
}

useGLTF.preload(schoolUrl)
